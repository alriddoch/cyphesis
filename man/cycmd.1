.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "CYCMD" "1" "15 October 2014" "" "cyphesis"

.SH NAME
cycmd \- cycmd game server process
.SH SYNOPSIS

\fBcycmd\fR [ \fB--section:option=value\fR\fI ...\fR ] [ \fBcommand [ server ]\fR ]

.SH "DESCRIPTION"
.PP
The \fBcycmd\fR program provides a commandline interface to a
cyphesis server.
.SH "OPTIONS"
.PP
Configuration options are divided up into named sections, which need to
be specified when modifying or overriding the options. In a config file
the name of a section is specified in square brackets at the beginning
of the section. On the command line the section is given at the
beginning of the option specification, as shown in the synopsis above.
.SS "CLIENT OPTIONS"
.PP
The following options used by \fBcycmd\fR are present in the
client section of the config file, and overriden by specifying the client
section name on the command line.
.TP
\fBserverhost=hostname \fR
Hostname of the server to connect to.

This setting provides the hostname of the system where cyphesis is running
that \fBcycmd\fR should try and connect to.
.SS "SERVER OPTIONS"
.PP
The following options are present in the cyphesis section of the config
file, and overriden by specifying the cyphesis section name on the
command line. These options apply to the server, but are also required
by the client to ensure that the client can connect.
.TP
\fBtcpport=6767 \fR
Network port for server TCP connections.

Specifies the port number to use when connecting to the server.
.TP
\fBunixport="cyphesis.sock" \fR
Local liston socket for Unix domain connections.

Specifies the filename to use to listen for local trusted client connections.
.SH "COMMANDS"
.TP
\fB  add_agent [ type ]  \fR
Create an in-game agent.

Create an avatar or agent in the game to be used to manipulate the world.
By default an avatar of type "creator" is created, and this is required for
most operations. Avatars of other types can be created, but have limited
ability to edit the world.
.TP
\fB  cancel  \fR
Cancel the current admin task.

Various commands begin a background admin task in the client. This command
stops any currently running task.
.TP
\fB  connect hostname  \fR
Connect the server to a peer.

Try and establish a connection to a peer server.
.TP
\fB  creator_create type  \fR
Use agent to create an entity.

Use the in-game agent owned by this client to create an in-game entity of any
type.
.TP
\fB  delete id  \fR
Delete an entity from the server.

Delete the in-game entity with the given ID from the world.
.TP
\fB  dump [ filename ]  \fR
Write the contents of the world to an Atlas dump file.

An Atlas representation of every entity on the server is written to a file
using the XML codec.
.TP
\fB  get id  \fR
Examine any object on the server.

Get an object description from the server, and display its contents.
.TP
\fB  find_by_name name  \fR
Find an entity with the given name.

Search the world for an entity with the given name, and return the first one
found.
.TP
\fB  find_by_type type  \fR
Find an entity with the given type.

Search the world for an entity with the given type, and return the first one
found.
.TP
\fB  flush type  \fR
Flush entities from the server

Search the world for entities with the given type, and delete them all.

This process does not work perfectly reliably, so may have to be run multiple
times to fully clear the server.
.TP
\fB  help  \fR
Display online help.

Lists all the commands available, with a short description of what each one
does.
.TP
\fB  install type_id parent_id  \fR
Install a new type in the server.

.TP
\fB  look  \fR
Return a view of the current server lobby.

Look at the current server lobby, where all users currently logged in
are represented. The view is returned and displayed.
.TP
\fB  logout [ account ]  \fR
Log user out of server.
.TP
\fB  monitor  \fR
Enable server monitoring.

Direct the server to report all in-game operations to the client. A digest
of each operation is displayed, including the type, which entity the operation
is from and which entity the operation is to.
.TP
\fB  query entity_id  \fR
Synonym for "get" (deprecated).
.TP
\fB  reload type  \fR
Reload the script for a type.

Reload the Python script for a given type from the file on disk.
.TP
\fB  restore [ filename ]  \fR
Restore the contents of an Atlas dump file into the world.

Read entities from an Atlas XML codec dump file, and restore them into the
server. The most reliable use case for this is with an empty server to restore
a snapshot of the world taken at an earlier time.

It is possible to restore a dump file into server which already contains a
world, but the following caveats apply:

If there are collisions between the ID space being used in the existing world,
and the ID space used in the dump file, the tool will do its best to do the
right thing, but the results are to some extent undefined. If an entity with
the same ID and type exists in both spaces, only one will exist after the
restore and it will have some of the properties of both copies of that entity.
.TP
\fB  stat  \fR
Examine the current server status.

Get a description of the current server status, and display its contents.
.TP
\fB  unmonitor  \fR
Disable server monitoring.

Direct the server to stop reporting all in-game operations to the client.
.SH "EXAMPLES"
.PP
The first example shows getting the current server status and checking
the lobby to see if any users are logged in.

.nf
cyphesis> stat
Info(
     builddate:  11:32:45, Sep 27 2004
     clients:  1
     name:  calcitration.ecs.soton.ac.uk
     objtype:  obj
     parents:  [  server ]
     ruleset:  mason
     server:  cyphesis
     uptime:  1728.2
     version:  0.3.2
)
cyphesis> look
Sight(
      id: lobby
      name: lobby
      objtype: obj
      parents: [  room ]
      people: [  1 ]
      rooms: [  ]
)
cyphesis> 
  
.fi
.PP
The first entity returned shows various information about the server,
including when it was built, the number of connected client, the
current ruleset, and the server uptime. The second entity representing
the lobby shows that only one user is current logged in, and no chat
rooms have been created.
.PP
The second example shows how to install a new type.

.nf
cyphesis> get thing
Info(
     children:  [  feature character plant food stackable structure arm arrow axe barrel block_house board boat boundary bow campfire cleaver coin fire gallows house lumber pelvis ribcage shin skull stall sword thigh tower twobyfour wall weather ]
     contains:  [  ]
     id:  thing
     loc:  
     name:  
     objtype:  class
     parents:  [  game_entity ]
     pos:  [  0 0 0 ]
     stamp_contains:  0
     velocity:  [  0 0 0 ]
)
cyphesis> install box thing
cyphesis> 
  
.fi
.PP
The third example shows server monitoring being enable, followed by information
of a series of in-game operations. The flow of messages in while monitoring the
server can be large. In order to supress the flow, the
\fBunmonitor\fR command must be used.

.nf
cyphesis> monitor 
cyphesis> 
tick(from="900006",to="900006")
tick(from="900007",to="900007")
cyphesis> 
tick(from="900008",to="900008")
cyphesis> 
tick(from="899982",to="899982")
cyphesis> 
tick(from="899356",to="899356")
cyphesis> 
tick(from="899357",to="899357")
cyphesis> 
tick(from="899358",to="899358")
cyphesis> 
tick(from="899359",to="899359")
cyphesis> 
tick(from="899360",to="899360")
cyphesis> 
tick(from="899361",to="899361")
cyphesis> 
  
.fi
.SH "AUTHOR"
.PP
Written by Alistair Riddoch.
.SH "REPORTING BUGS"
.PP
Report bugs to <general@worldforge.org>\&.
.SH "COPYRIGHT"
.PP
Copyright 2004 Alistair Riddoch.
.SH "SEE ALSO"
.PP
\fBcyphesis\fR(1),
\fBcyclient\fR(1),
\fBcyphesis-tools\fR(1)
